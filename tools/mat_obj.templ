
classdef {{ classname }} < moku
    % {{ classname | upper }}(IpAddr) 
    % Driver class for the Moku:{{ instrumentname }}
    %
    % {{ classname | upper }} Properties:
    %   IP - IP address of the currently connected Moku:Lab device.
    %   Instrument - Name of the currently running instrument.
    %   Timeout - Command timeout period (sec)
    %
    % {{ classname | upper }} Methods:
    {% for func in functions %}
    %   {{ func.name }}  - {{ func.docstring | firstline }}
    {% endfor %}

    methods
        function obj = {{ classname }}(IpAddr)
            obj@moku(IpAddr, '{{ instrumentname | lower }}');
        end

        {% for func in functions|sort(attribute='name') %}
        {% if func.return | length > 0 %}
        function {{ func.return }} = {{ func.name }}(obj{% if func.args | length > 0 %}, {{ func.args | join(', ') }}{% endif %}{% if func.nkwargs > 0 %}, varargin{% endif %})
        {% else %}
        function {{ func.name }}(obj{% if func.args | length > 0 %}, {{ func.args | join(', ') }}{% endif %}{% if func.nkwargs > 0 %}, varargin{% endif %})
        {% endif%}
            % {{ func.name | upper }}({% if func.args | length > 0 %}{{ func.args | join(', ') }}{% endif %})
            {% if func.nkwargs > 0 %}
            % {{ func.name | upper }}(...,param1,val1,param2,val2,...)
            {% endif %}
            % {{ func.docstring | replace('\n', '\n            % ') }}
            params = struct({% for arg in func.args %}'{{ arg }}',{{ arg }}{{"," if not loop.last }}{% endfor %});
            {% if func.nkwargs > 0 %}
            kwargs = varargin;
            params = moku.params_to_struct(params, kwargs);
            {% endif %}
            {% if func.return | length > 0 %}
            {{ func.return }} = ...
            {% endif %}
            mokuctl(obj, '{{ func.name }}', params);
        end

        {% endfor %}
    end
end

